//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Threading.Tasks;

namespace Mora.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(Mora.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connection", ReplyAction="http://tempuri.org/IServiceChat/ConnectionResponse")]
        int Connection(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connection", ReplyAction="http://tempuri.org/IServiceChat/ConnectionResponse")]
        System.Threading.Tasks.Task<int> ConnectionAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Diconnection", ReplyAction="http://tempuri.org/IServiceChat/DiconnectionResponse")]
        void Diconnection(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Diconnection", ReplyAction="http://tempuri.org/IServiceChat/DiconnectionResponse")]
        System.Threading.Tasks.Task DiconnectionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(string msg, int idFrom, int idTo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int idFrom, int idTo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceChat/DBconnection", ReplyAction = "http://tempuri.org/IServiceChat/DBconnectionResponse")]
        bool DBconnection(string connStr);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceChat/DBconnection", ReplyAction = "http://tempuri.org/IServiceChat/DBconnectionResponse")]
        System.Threading.Tasks.Task<bool> DBconnectionAsync(string connStr);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceChat/AddUserInDB")]
        bool AddUserInDB(string login, string password);

        [System.ServiceModel.OperationContractAttribute( Action = "http://tempuri.org/IServiceChat/AddUserInDB")]
        System.Threading.Tasks.Task<bool> AddUserInDBAsync(string login, string password);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceChat/LoginUser")]
        int LoginUser(string login, string password);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IServiceChat/LoginUser")]
        System.Threading.Tasks.Task<int> LoginUserAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallBack")]
        void MsgCallBack(string msg, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : Mora.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<Mora.ServiceChat.IServiceChat>, Mora.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connection(string login) {
            return base.Channel.Connection(login);
        }
        
        public System.Threading.Tasks.Task<int> ConnectionAsync(string login) {
            return base.Channel.ConnectionAsync(login);
        }
        
        public void Diconnection(int id) {
            base.Channel.Diconnection(id);
        }
        
        public System.Threading.Tasks.Task DiconnectionAsync(int id) {
            return base.Channel.DiconnectionAsync(id);
        }
        
        public void SendMsg(string msg, int idFrom, int idTo) {
            base.Channel.SendMsg(msg, idFrom, idTo);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int idFrom, int idTo) {
            return base.Channel.SendMsgAsync(msg, idFrom, idTo);
        }
        public bool DBconnection(string connStr)
        {
            return base.Channel.DBconnection(connStr);
        }

        public Task<bool> DBconnectionAsync(string connStr)
        {
            return base.Channel.DBconnectionAsync(connStr);
        }

        public bool AddUserInDB(string login, string password)
        {
            return base.Channel.AddUserInDB(login, password);
        }

        public Task<bool> AddUserInDBAsync(string login, string password)
        {
            return base.Channel.AddUserInDBAsync(login, password);
        }

        public int LoginUser(string login, string password)
        {
            return base.Channel.LoginUser(login, password);
        }

        public System.Threading.Tasks.Task<int> LoginUserAsync(string login, string password)
        {
            return base.Channel.LoginUserAsync(login, password);
        }
    }
}
